# ********RoostGPT********
"""
Test generated by RoostGPT for test python-test using AI Type  and AI Model 

ROOST_METHOD_HASH=average_4d7466d91c
ROOST_METHOD_SIG_HASH=average_59ae449da4


Sure, here are the test scenarios for the `average` function:

### Scenario 1: Valid Input with Positive Integers
**Details:**
  - **TestName:** test_average_with_positive_integers
  - **Description:** Verify that the function correctly calculates the average for a list of positive integers.
  
**Execution:**
  - **Arrange:** Prepare the input string "10 20 30 40 50".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 30.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly handles a typical case of positive integer inputs and calculates their average.

---

### Scenario 2: Valid Input with Negative and Positive Integers
**Details:**
  - **TestName:** test_average_with_mixed_integers
  - **Description:** Verify that the function handles both negative and positive integers correctly.
  
**Execution:**
  - **Arrange:** Prepare the input string "-10 20 -30 40 -50".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is -6.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly calculates the average when both negative and positive integers are present.

---

### Scenario 3: Valid Input with Zero
**Details:**
  - **TestName:** test_average_with_zero
  - **Description:** Verify that the function handles zero correctly in the number series.
  
**Execution:**
  - **Arrange:** Prepare the input string "0 0 0 0 0".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 0.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly calculates the average when all numbers are zero.

---

### Scenario 4: Valid Input with Single Number
**Details:**
  - **TestName:** test_average_with_single_number
  - **Description:** Verify that the function returns the number itself when the input consists of a single number.
  
**Execution:**
  - **Arrange:** Prepare the input string "42".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 42.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly handles the edge case of a single number input.

---

### Scenario 5: Valid Input with Large Numbers
**Details:**
  - **TestName:** test_average_with_large_numbers
  - **Description:** Verify that the function correctly calculates the average for a list of large numbers.
  
**Execution:**
  - **Arrange:** Prepare the input string "1000000 2000000 3000000".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 2000000.0.

**Validation:**
  - **Rationale:** This test ensures that the function can handle large integer inputs and compute their average accurately.

---

### Scenario 6: Edge Case with No Input
**Details:**
  - **TestName:** test_average_with_no_input
  - **Description:** Verify that the function handles the edge case of no input gracefully.
  
**Execution:**
  - **Arrange:** Prepare an empty input string.
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the function raises a ValueError or handles the case appropriately.

**Validation:**
  - **Rationale:** This test ensures that the function can handle edge cases where no numbers are provided and does not crash.

---

### Scenario 7: Input with Non-Numeric Values
**Details:**
  - **TestName:** test_average_with_non_numeric_values
  - **Description:** Verify that the function raises an appropriate error when non-numeric values are included in the input.
  
**Execution:**
  - **Arrange:** Prepare the input string "10 20 abc 30".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the function raises a ValueError.

**Validation:**
  - **Rationale:** This test ensures that the function validates input data and raises an error when encountering non-numeric values.

---

### Scenario 8: Valid Input with Floating Point Numbers
**Details:**
  - **TestName:** test_average_with_floating_point_numbers
  - **Description:** Verify that the function correctly calculates the average for a list of floating-point numbers.
  
**Execution:**
  - **Arrange:** Prepare the input string "10.5 20.5 30.5".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 20.5.

**Validation:**
  - **Rationale:** This test ensures that the function can handle floating-point numbers and compute their average accurately.

---

### Scenario 9: Valid Input with All Identical Numbers
**Details:**
  - **TestName:** test_average_with_identical_numbers
  - **Description:** Verify that the function calculates the average correctly when all input numbers are identical.
  
**Execution:**
  - **Arrange:** Prepare the input string "5 5 5 5 5".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is 5.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly computes the average when all numbers in the input are the same.

---

### Scenario 10: Valid Input with Negative Integers
**Details:**
  - **TestName:** test_average_with_negative_integers
  - **Description:** Verify that the function correctly calculates the average for a list of negative integers.
  
**Execution:**
  - **Arrange:** Prepare the input string "-10 -20 -30 -40 -50".
  - **Act:** Simulate the input and invoke the `average` function.
  - **Assert:** Check that the result is -30.0.

**Validation:**
  - **Rationale:** This test ensures that the function correctly handles and computes the average of negative integers.

---

These scenarios cover a comprehensive range of cases, including typical usage, edge cases, and error conditions, helping to ensure the robustness and correctness of the `average` function.
"""

# ********RoostGPT********
def average():
    """This function takes space-separated number series and then converts it to a list.
    Then calculates the average of that list of numbers."""
    try:
        nums = list(map(float, input("Enter all numbers separated by space: ").split()))
        if not nums:
            raise ValueError("No numbers provided")
        return sum(nums) / len(nums)
    except ValueError as e:
        raise ValueError(f"Invalid input: {e}")
