# ********RoostGPT********
"""
Test generated by RoostGPT for test oct25-test using AI Type  and AI Model 

ROOST_METHOD_HASH=is_valid_location_c0d12a3ecd
ROOST_METHOD_SIG_HASH=is_valid_location_49093e67e7


Here are some test scenarios for the `is_valid_location` function:

### Scenario 1: Valid Column with Empty Top Row
Details:
  TestName: test_valid_column_empty_top_row
  Description: Verify that the function returns `True` when the top row of the specified column is empty, indicating a valid location for a move.
Execution:
  Arrange: Initialize a `board` with dimensions `ROW_COUNT x COLUMN_COUNT` where `ROW_COUNT - 1` row is all zeros, and choose any `col` within the valid range.
  Act: Call `is_valid_location(board, col)`.
  Assert: Expect the function to return `True`.
Validation:
  Rationalize that a column is considered valid for a move if the top-most cell is empty (represented by 0), allowing a piece to be placed there.

### Scenario 2: Invalid Column with Filled Top Row
Details:
  TestName: test_invalid_column_filled_top_row
  Description: Verify that the function returns `False` when the top row of the specified column is filled, indicating an invalid location for a move.
Execution:
  Arrange: Initialize a `board` with dimensions `ROW_COUNT x COLUMN_COUNT` where the `ROW_COUNT - 1` row has at least one non-zero value in the chosen `col`.
  Act: Call `is_valid_location(board, col)`.
  Assert: Expect the function to return `False`.
Validation:
  Rationalize that a column is invalid for a move if the top-most cell is filled (non-zero), which prevents placing another piece.

### Scenario 3: Edge Case - First Column
Details:
  TestName: test_first_column
  Description: Verify the function's behavior when the column specified is the first column (index 0).
Execution:
  Arrange: Initialize a `board` with dimensions `ROW_COUNT x COLUMN_COUNT` where the first column's top row is either 0 or non-zero, testing both scenarios.
  Act: Call `is_valid_location(board, 0)`.
  Assert: Expect the function to return `True` if the top row is 0, otherwise `False`.
Validation:
  Rationalize the importance of testing edge columns to ensure correct behavior at array boundaries.

### Scenario 4: Edge Case - Last Column
Details:
  TestName: test_last_column
  Description: Verify the function's behavior when the column specified is the last column (index `COLUMN_COUNT - 1`).
Execution:
  Arrange: Initialize a `board` with dimensions `ROW_COUNT x COLUMN_COUNT` where the last column's top row is either 0 or non-zero, testing both scenarios.
  Act: Call `is_valid_location(board, COLUMN_COUNT - 1)`.
  Assert: Expect the function to return `True` if the top row is 0, otherwise `False`.
Validation:
  Rationalize the importance of testing edge columns to ensure correct behavior at array boundaries.

### Scenario 5: Full Board
Details:
  TestName: test_full_board
  Description: Verify that the function returns `False` for any column when the board is completely filled.
Execution:
  Arrange: Initialize a `board` with dimensions `ROW_COUNT x COLUMN_COUNT` where every cell is non-zero.
  Act: Call `is_valid_location(board, col)` for each column in the board.
  Assert: Expect the function to return `False` for all columns.
Validation:
  Rationalize that a full board should not allow any additional moves, ensuring the game logic correctly identifies a filled state.
"""

# ********RoostGPT********
import numpy as np
import pygame
import sys
import math
import pytest
from Connect_Four.main import is_valid_location

# Constants
ROW_COUNT = 6
COLUMN_COUNT = 7

@pytest.mark.smoke
@pytest.mark.positive
def test_valid_column_empty_top_row():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT), dtype=int)
    col = 3  # Choose any column within the valid range
    assert is_valid_location(board, col) == True

@pytest.mark.smoke
@pytest.mark.negative
def test_invalid_column_filled_top_row():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT), dtype=int)
    col = 3  # Choose any column within the valid range
    board[ROW_COUNT - 1][col] = 1  # Fill the top row of the chosen column
    assert is_valid_location(board, col) == False

@pytest.mark.regression
@pytest.mark.edge
def test_first_column():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT), dtype=int)
    col = 0  # First column
    assert is_valid_location(board, col) == True

    board[ROW_COUNT - 1][col] = 1  # Fill the top row of the first column
    assert is_valid_location(board, col) == False

@pytest.mark.regression
@pytest.mark.edge
def test_last_column():
    board = np.zeros((ROW_COUNT, COLUMN_COUNT), dtype=int)
    col = COLUMN_COUNT - 1  # Last column
    assert is_valid_location(board, col) == True

    board[ROW_COUNT - 1][col] = 1  # Fill the top row of the last column
    assert is_valid_location(board, col) == False

@pytest.mark.regression
@pytest.mark.negative
def test_full_board():
    board = np.ones((ROW_COUNT, COLUMN_COUNT), dtype=int)
    for col in range(COLUMN_COUNT):
        assert is_valid_location(board, col) == False
